<#
.SUMMARY
Query the infostore (AKA repository) and return a PsCustomObject representation of the resource(s) (AKA infoobjects).

.PARAMETER $Token
The token generated by Get-LogonToken.

.PARAMETER $Token
The path segment that identifies the resource(s).

.EXAMPLE
PS> $token = Get-LogonToken ...

# get all objects in the Root Folder (AKA 'All Folders' folder)
PS> Get-InfoObject -Token $token -Path 'Root Folder/children'
__metadata       first           last            entries
----------       -----           ----            -------
@{uri=http://..  @{__deferred=}  @{__deferred=}  {@{__metadata=; id=5558324; cuid=AZeF...

.EXAMPLE
PS> $token = Get-LogonToken ...

# get all objects in the 9999 folder (i.e. the folder with id 9999); select the name and type properties, convert data to CSV format, then save to file on Desktop
PS> (Get-InfoObject -Token $token -Path '9999/children').entries | Select-Object name, type | ConvertTo-Csv -NoTypeInformation | Out-File ~\Desktop\data.csv

#>
function Get-InfoObject {

	[CmdletBinding()]
	param(
		[Parameter(Position = 0, Mandatory = $true)]
		[string]$Token,

		[Parameter(Position = 1)]
		[string]$Path='Root Folder/children'
	)

	BEGIN {

		$server = $MyInvocation.MyCommand.Module.PrivateData.Server
		Write-Debug $server

		Write-Debug $token

		$url="http://$server/biprws/infostore/$path"
		Write-Debug $url

		$urlEscaped = [uri]::EscapeUriString($url)
		Write-Verbose $urlEscaped

		$client = New-Object System.Net.WebClient
		$client.Headers.Add("Accept","application/json")
		$client.Headers.Add("X-SAP-LogonToken",$token)
	}

	PROCESS {

		try {
			$result = $client.DownloadString($urlEscaped) | ConvertFrom-Json
			$result
		}
		catch [Net.WebException] {
			# $_.Exception | fl * -Force
			Write-Error $_.Exception.ToString()
		}
		catch [Exception]{
			# $_ | fl * -Force
			# Write-Error -Message $_.Message -Exception $_ -Category ObjectNotFound
			Write-Error $_.Exception.ToString()
		}
	}

	END {}

}
